#!/bin/bash
# -----------------------------------------------------------------------------
# Lambda情報取得リソースファイル(Mac/Linux用)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# 【環境変数】
# OS_TYPE         ：OS種別
# OVERWRITE_OPTION：sedコマンドのオプション
# ITEMS           ：セクション数のカウント初期化処理
# ROW_COUNT       ：項目行の行数カウント初期化処理
# AWS_REGION      ：情報を取得するリージョンの指定【編集可】
#                   複数リージョンを取得する場合はカンマ（,）で区切る
# LIST_TMP        ：リージョンリスト作成用tmpファイル
# -----------------------------------------------------------------------------
OS_TYPE=$(uname -s)
if [ ${OS_TYPE} == "Darwin" ]; then
  OVERWRITE_OPTION=".tmp"
else
  OVERWRITE_OPTION=""
fi

ITEMS="0"
ROW_COUNT[${ITEMS}]="0"
AWS_REGION="ap-northeast-1,us-east-1"
LIST_TMP=.${RESOURCE_NAME}.tmp
echo ${AWS_REGION} | sed -e "s/ //g" -e "s/,/\n/g" >| ${LIST_TMP}

# -----------------------------------------------------------------------------
# 【メイン処理】
# -----------------------------------------------------------------------------
# タイトル【編集可】
echo "# Lambda" >| ${OUTPUT_PATH}

# リージョンごとの情報取得
while read REGION_LIST
do
  # リージョンごとの表題【編集可】
  echo "## Lambda関数 (${REGION_LIST})" >> ${OUTPUT_PATH}
  echo "" >> ${OUTPUT_PATH}

  # 項目行の行数カウント処理
  ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

  # リソースリスト取得【編集可】
  aws lambda list-functions --region ${REGION_LIST} | jq -r '.Functions[] |
  [
    .FunctionName, # 関数名
    (.Description | if . | length == 0 then "-" else . end), # 説明
    .PackageType, # パッケージタイプ
    .Runtime, # ランタイム
    .MemorySize, # メモリ
    .EphemeralStorage.Size, # エフェメラルストレージ
    .Timeout, # タイムアウト
    # VPC
    (
      if .VpcConfig then
        .VpcConfig.VpcId
      else
        "-"
      end
    ),
    # VPCサブネット
    (
      if .VpcConfig then
        .VpcConfig.SubnetIds | join("<br>")
      else
        "-"
      end
    ),
    # セキュリティグループ
    (
      if .VpcConfig then
        .VpcConfig.SecurityGroupIds | join("<br>")
      else
        "-"
      end
    ),
    # 環境変数
    (
      if .Environment.Variables then
        .Environment.Variables | to_entries | map("\(.key)=\(.value)") | join("<br>")
      else
        "-"
      end
    )
  ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" >> ${OUTPUT_PATH}

  # 項目行とMarkdown形式の表の書式行追加【編集可】
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|関数名|説明|パッケージタイプ|ランタイム|メモリ|エフェメラルストレージ|タイムアウト(秒)|VPC|サブネット|セキュリティグループ|環境変数|\n/" ${OUTPUT_PATH}
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|\n/" ${OUTPUT_PATH}

  # 改行【編集可】
  echo "" >> ${OUTPUT_PATH}

  # CSVファイルへの変換処理
  if [ ${FILETYPE} == "csv" ]; then
    EXPORT_CSV ${ITEMS} ${OUTPUT_PATH}
  fi

done < ${LIST_TMP}

# 作業用tmpファイルの削除
rm -f ${LIST_TMP}

if [ ${OS_TYPE} == Darwin ]; then
  rm -f ${OUTPUT_PATH}${OVERWRITE_OPTION}
fi