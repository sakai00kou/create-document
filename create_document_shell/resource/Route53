#!/bin/bash
# -----------------------------------------------------------------------------
# route53情報取得リソースファイル(Mac/Linux用)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# 【環境変数】
# OS_TYPE         ：OS種別
# OVERWRITE_OPTION：sedコマンドのオプション
# ITEMS           ：セクション数のカウント初期化処理
# ROW_COUNT       ：項目行の行数カウント初期化処理
# AWS_REGION      ：情報を取得するリージョンの指定【編集可】
#                   複数リージョンを取得する場合はカンマ（,）で区切る
# LIST_TMP        ：リージョンリスト作成用tmpファイル
# HOSTED_ZONE_TMP ：ホストゾーンリスト作成用tmpファイル
# -----------------------------------------------------------------------------
OS_TYPE=$(uname -s)
if [ ${OS_TYPE} == "Darwin" ]; then
  OVERWRITE_OPTION=".tmp"
else
  OVERWRITE_OPTION=""
fi

ITEMS="0"
ROW_COUNT[${ITEMS}]="0"
AWS_REGION="ap-northeast-1"
LIST_TMP=.${RESOURCE_NAME}.tmp
echo ${AWS_REGION} | sed -e "s/ //g" -e "s/,/\n/g" >| ${LIST_TMP}
HOSTED_ZONE_TMP=".hosted_zone.tmp"

# -----------------------------------------------------------------------------
# 【メイン処理】
# -----------------------------------------------------------------------------
# タイトル【編集可】
echo "# Route53" >| ${OUTPUT_PATH}

# リージョンごとの情報取得
while read REGION_LIST
do
  # リージョンごとの表題【編集可】
  echo "## Route53 (${REGION_LIST})" >> ${OUTPUT_PATH}
  echo "" >> ${OUTPUT_PATH}

  # 項目行の行数カウント処理
  ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

  # リソースリスト取得【編集可】
  aws route53 list-hosted-zones --region ${REGION_LIST} | jq -r '.HostedZones[] |
  [
    .Name,
    (.Id // "-" | split("/") | .[-1]),
    .Config.PrivateZone
  ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" >> ${OUTPUT_PATH}

  # 項目行とMarkdown形式の表の書式行追加【編集可】
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|ドメイン名|ホストゾーンID|プライベートゾーン|\n/" ${OUTPUT_PATH}
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|\n/" ${OUTPUT_PATH}

  # 改行【編集可】
  echo "" >> ${OUTPUT_PATH}

  # -----------------------------------------------------------------------------
  # ホステッドゾーン
  # -----------------------------------------------------------------------------
  # セクション数変数のインクリメント
  ITEMS=$((${ITEMS}+1))

  # ホストゾーンID取得
  aws route53 list-hosted-zones --region ${REGION_LIST} | jq -r '.HostedZones[] | [(.Id // "-" | split("/") | .[-1])] | @tsv' >> ${HOSTED_ZONE_TMP}

  # リソースリスト取得【編集可】
  while read HOSTED_ZONE_ID
  do
    # ホストゾーンごとの表題【編集可】
    echo "### ${HOSTED_ZONE_ID} (${REGION_LIST})" >> ${OUTPUT_PATH}
    echo "" >> ${OUTPUT_PATH}

    # 項目行の行数カウント処理
    ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

    aws route53 list-resource-record-sets --hosted-zone-id ${HOSTED_ZONE_ID} --region ${REGION_LIST} | jq -r '.ResourceRecordSets[] |
    [
      .Name, # レコード名
      .Type, # タイプ
      # タイプ別のレコード値取得
      (
        if .Type == "A" and .AliasTarget != null then
          .AliasTarget.DNSName
        elif .Type == "A" and .AliasTarget == null then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "CNAME" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "MX" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "NS" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "PTR" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "SOA" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "SPF" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "SRV" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        elif .Type == "TXT" then
          (.ResourceRecords | if type == "array" then map(.Value) | join("<br>") else .Value end)
        else
          "-"
        end
      ),
      .TTL // "-"
    ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" >> ${OUTPUT_PATH}

    # 項目行とMarkdown形式の表の書式行追加【編集可】
    sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|レコード名|タイプ|レコード|TTL|\n/" ${OUTPUT_PATH}
    sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|:--|\n/" ${OUTPUT_PATH}

    # 改行【編集可】
    echo "" >> ${OUTPUT_PATH}

  done < ${HOSTED_ZONE_TMP}

  # CSVファイルへの変換処理
  if [ ${FILETYPE} == "csv" ]; then
    EXPORT_CSV ${ITEMS} ${OUTPUT_PATH}
  fi

done < ${LIST_TMP}

# 作業用tmpファイルの削除
rm -f ${LIST_TMP}
rm -f ${HOSTED_ZONE_TMP}

if [ ${OS_TYPE} == Darwin ]; then
  rm -f ${OUTPUT_PATH}${OVERWRITE_OPTION}
fi