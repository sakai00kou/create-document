#!/bin/bash
# -----------------------------------------------------------------------------
# CloudWatch情報取得リソースファイル(Mac/Linux用)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# 【環境変数】
# OS_TYPE         ：OS種別
# OVERWRITE_OPTION：sedコマンドのオプション
# ITEMS           ：セクション数のカウント初期化処理
# ROW_COUNT       ：項目行の行数カウント初期化処理
# AWS_REGION      ：情報を取得するリージョンの指定【編集可】
#                   複数リージョンを取得する場合はカンマ（,）で区切る
# LIST_TMP        ：リージョンリスト作成用tmpファイル
# -----------------------------------------------------------------------------
OS_TYPE=$(uname -s)
if [ ${OS_TYPE} == "Darwin" ]; then
  OVERWRITE_OPTION=".tmp"
else
  OVERWRITE_OPTION=""
fi

ITEMS="0"
ROW_COUNT[${ITEMS}]="0"
AWS_REGION="ap-northeast-1,us-east-1"
LIST_TMP=.${RESOURCE_NAME}.tmp
echo ${AWS_REGION} | sed -e "s/ //g" -e "s/,/\n/g" >| ${LIST_TMP}

# -----------------------------------------------------------------------------
# 【メイン処理】
# -----------------------------------------------------------------------------
# タイトル【編集可】
echo "# CloudWatch" >| ${OUTPUT_PATH}

# リージョンごとの情報取得
while read REGION_LIST
do
  # リージョンごとの表題【編集可】
  echo "## CloudWatch Alarm (${REGION_LIST})" >> ${OUTPUT_PATH}
  echo "" >> ${OUTPUT_PATH}

  # 項目行の行数カウント処理
  ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

  # リソースリスト取得【編集可】
  aws cloudwatch describe-alarms --region ${REGION_LIST} | jq -r '.MetricAlarms[] |
  [
    .Namespace // "-", # 名前
    .MetricName // "-", # メトリック名
    .StateValue, # 状態
    (.AlarmArn | split(":") | .[5]), # レベル
    .Period // "-", # 間隔(秒)
    .Statistic // "-", # 統計
    .ComparisonOperator, # 符号
    .Threshold // "-", # しきい値
    .EvaluationPeriods, # 期間(分)
    .DatapointsToAlarm // "-", # データポイント
    .TreatMissingData // "-", # No Data取扱
    .AlarmDescription // "-", # Description
    .AlarmName # アラーム名
  ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" \
    -e "s/GreaterThanOrEqualToThreshold/>=/g" \
    -e "s/LessThanOrEqualToThreshold/<=/g" \
    -e "s/GreaterThanThreshold/>/g" \
    -e "s/LessThanThreshold/</g" >> ${OUTPUT_PATH}

  # 項目行とMarkdown形式の表の書式行追加【編集可】
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|名前|メトリック名|状態|レベル|間隔(秒)|統計|符号|しきい値|期間(分)|データポイント|No Data取扱|Description|アラーム名|\n/" ${OUTPUT_PATH}
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|\n/" ${OUTPUT_PATH}

  # 改行【編集可】
  echo "" >> ${OUTPUT_PATH}

  # -----------------------------------------------------------------------------
  # ログ
  # -----------------------------------------------------------------------------
  # セクション数変数のインクリメント
  ITEMS=$((${ITEMS}+1))

  # リージョンごとの表題【編集可】
  echo "## ログ (${REGION_LIST})" >> ${OUTPUT_PATH}
  echo "" >> ${OUTPUT_PATH}

  # 項目行の行数カウント処理
  ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

  # リソースリスト取得【編集可】
  aws logs describe-log-groups --region ${REGION_LIST} | jq -r '.logGroups[] |
  [
    .logGroupName,
    .retentionInDays,
    .metricFilterCount
  ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" >> ${OUTPUT_PATH}

  # 項目行とMarkdown形式の表の書式行追加【編集可】
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|ロググループ|保持期間(日)|メトリクスフィルタ|\n/" ${OUTPUT_PATH}
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|\n/" ${OUTPUT_PATH}

  # 改行【編集可】
  echo "" >> ${OUTPUT_PATH}

  # CSVファイルへの変換処理
  if [ ${FILETYPE} == "csv" ]; then
    EXPORT_CSV ${ITEMS} ${OUTPUT_PATH}
  fi

done < ${LIST_TMP}

# 作業用tmpファイルの削除
rm -f ${LIST_TMP}

if [ ${OS_TYPE} == Darwin ]; then
  rm -f ${OUTPUT_PATH}${OVERWRITE_OPTION}
fi