#!/bin/bash
# -----------------------------------------------------------------------------
# Security Group情報取得リソースファイル(Mac/Linux用)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# 【環境変数】
# OS_TYPE         ：OS種別
# OVERWRITE_OPTION：sedコマンドのオプション
# ITEMS           ：セクション数のカウント初期化処理
# ROW_COUNT       ：項目行の行数カウント初期化処理
# AWS_REGION      ：情報を取得するリージョンの指定【編集可】
#                   複数リージョンを取得する場合はカンマ（,）で区切る
# LIST_TMP        ：リージョンリスト作成用tmpファイル
# -----------------------------------------------------------------------------
OS_TYPE=$(uname -s)
if [ ${OS_TYPE} == "Darwin" ]; then
  OVERWRITE_OPTION=".tmp"
else
  OVERWRITE_OPTION=""
fi

ITEMS="0"
ROW_COUNT[${ITEMS}]="0"
AWS_REGION="ap-northeast-1"
LIST_TMP=.${RESOURCE_NAME}.tmp
echo ${AWS_REGION} | sed -e "s/ //g" -e "s/,/\n/g" >| ${LIST_TMP}

# -----------------------------------------------------------------------------
# 【メイン処理】
# -----------------------------------------------------------------------------
# タイトル【編集可】
echo "# SecurityGroup" >| ${OUTPUT_PATH}

# リージョンごとの情報取得
while read REGION_LIST
do
  # リージョンごとの表題【編集可】
  echo "## SecurityGroup (${REGION_LIST})" >> ${OUTPUT_PATH}
  echo "" >> ${OUTPUT_PATH}

  # 項目行の行数カウント処理
  ROW_COUNT[${ITEMS}]=$(wc -l ${OUTPUT_PATH} | awk '{print $1}')

  # リソースリスト取得【編集可】
  aws ec2 describe-security-groups --region ${REGION_LIST} | jq -r '.SecurityGroups[] |
  [
    (.Tags[]? | select(.Key == "Name").Value) // "-", # 名前
    .GroupId, # セキュリティグループID
    .GroupName, # セキュリティグループ名
    .Description, # セキュリティグループの説明
    .VpcId, # VPC ID
    # インバウンドIPプロトコル
    (
      .IpPermissions |
      if . | length > 0 then
        map(.IpProtocol) | join("<br>")
      else
        "-"
      end
    ),
    # インバウンド開始ポート
    (
      .IpPermissions |
      if . | length > 0 then
        map(.FromPort // "すべて") | join("<br>")
      else
        "-"
      end
    ),
    # インバウンド終了ポート
    (
      .IpPermissions |
      if . | length > 0 then
        map(.ToPort // "すべて") | join("<br>")
      else
        "-"
      end
    ),
    # インバウンドソースの取得（IPレンジ、他のセキュリティグループ、プレフィックスリスト）
    (
      .IpPermissions |
      if . | length > 0 then
        map(
          if .IpRanges | length > 0 then
            (.IpRanges | map(.CidrIp) | join("<br>"))
          elif .UserIdGroupPairs | length > 0 then
            (.UserIdGroupPairs | map(.GroupId) | join("<br>"))
          else
            (.PrefixListIds | map(.PrefixListId) | join("<br>"))
          end
        ) | join("<br>")
      else
        "-"
      end
    ),
    # インバウンド説明
    (.IpPermissionsEgress[].UserIdGroupPairs |
      map(.Description // "-") | (
        if length == 0 then ["-"]
        else .
        end
      ) | join("<br>")
    ),
    # アウトバウンドIPプロトコル
    (
      .IpPermissionsEgress |
      if . | length > 0 then
        map(.IpProtocol) | join("<br>")
      else
        "-"
      end
    ),
    # アウトバウンド開始ポート
    (
      .IpPermissionsEgress |
      if . | length > 0 then
        map(.FromPort // "すべて") | join("<br>")
      else
        "-"
      end
    ),
    # アウトバウンド終了ポート
    (
      .IpPermissionsEgress |
      if . | length > 0 then
        map(.ToPort // "すべて") | join("<br>")
      else
        "-"
      end
    ),
    # アウトバウンドソースの取得（IPレンジ、他のセキュリティグループ、プレフィックスリスト）
    (
      .IpPermissionsEgress |
      if . | length > 0 then
        map(
          if .IpRanges | length > 0 then
            (.IpRanges | map(.CidrIp) | join("<br>"))
          elif .UserIdGroupPairs | length > 0 then
            (.UserIdGroupPairs | map(.GroupId) | join("<br>"))
          else
            (.PrefixListIds | map(.PrefixListId) | join("<br>"))
          end
        ) | join("<br>")
      else
        "-"
      end
    ),
    # アウトバウンド説明
    (.IpPermissionsEgress[].UserIdGroupPairs |
      map(.Description // "-") | (
        if length == 0 then ["-"]
        else .
        end
      ) | join("<br>")
    )

  ] | @tsv' | sort | sed -e "s/\t/|/g" -e "s/^/|/g" -e "s/$/|/g" -e "s/\"//g" \
    -e "s/-1/すべて/g" >> ${OUTPUT_PATH}

  # 項目行とMarkdown形式の表の書式行追加【編集可】
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+1))s/^/|名前|セキュリティグループID|セキュリティグループ名|セキュリティグループの説明|VPC ID|インバウンドプロトコル|インバウンド開始ポート番号|インバウンド終了ポート番号|インバウンドソース|インバウンド説明|アウトバウンドプロトコル|アウトバウンド開始ポート番号|アウトバウンド終了ポート番号|アウトバウンドソース|アウトバウンド説明|\n/" ${OUTPUT_PATH}
  sed -i ${OVERWRITE_OPTION} -e "$((${ROW_COUNT[${ITEMS}]}+2))s/^/|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|\n/" ${OUTPUT_PATH}
  # 改行【編集可】
  echo "" >> ${OUTPUT_PATH}

  # CSVファイルへの変換処理
  if [ ${FILETYPE} == "csv" ]; then
    EXPORT_CSV ${ITEMS} ${OUTPUT_PATH}
  fi

done < ${LIST_TMP}

# 作業用tmpファイルの削除
rm -f ${LIST_TMP}

if [ ${OS_TYPE} == Darwin ]; then
  rm -f ${OUTPUT_PATH}${OVERWRITE_OPTION}
fi